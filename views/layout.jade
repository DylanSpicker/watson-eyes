doctype html
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3mobile.css">
    script(src='/javascripts/main.js')
    script(src="https://code.jquery.com/jquery-3.2.1.min.js", integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=", crossorigin="anonymous")
  body(onload='init();')
    block content
  script.
    navigator.getUserMedia = ( navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
    var video;
    var webcamStream;
    function startWebcam() {
      if (navigator.getUserMedia) {
        if (webcamStream != null) stopWebcam();

        var camera_id = document.getElementById("camera_options").value;
        if (camera_id == "") {
          var constraints = {video: true, audio: false};
        } else {
          var constraints = {video: {deviceId: camera_id}, audio: false}
        }

        navigator.getUserMedia (constraints,
          // successCallback
          function(localMediaStream) {
            video = document.querySelector('video');
            video.src = window.URL.createObjectURL(localMediaStream);
            webcamStream = localMediaStream;

            navigator.mediaDevices.enumerateDevices()
                    .then(function(devices) {
                      $("#camera_options").html("<option value=''>Default Camera</option>");
                      devices.forEach(function(device) {
                        if (device.kind == 'videoinput') {
                          var selected = ''
                          if (camera_id == device.deviceId) selected = 'selected';

                          $("#camera_options").append("<option "+selected+" value='"+device.deviceId+"'>"+device.label+"</option>");
                        }
                      });
                    });
              
          },
          // errorCallback
          function(err) {
            console.log("The following error occured: " + err);
        });
      } else {
        console.log("getUserMedia not supported");
      }
    }
    function stopWebcam() {
      webcamStream.getTracks().forEach(function(track){
        track.stop();
      });        
    }

    //---------------------
    // TAKE A SNAPSHOT CODE
    //---------------------
    var canvas, ctx;
    function init() {
      // Get the canvas and obtain a context for
      // drawing in it
      canvas = document.getElementById("myCanvas");
      ctx = canvas.getContext('2d');
    }
    function snapshot() {
      // Draws current image from the video element into the canvas
      videoPlayer = document.getElementById("video");

      canvas.height = videoPlayer.videoHeight;
      canvas.width = videoPlayer.videoWidth;

      ctx.drawImage(video, 0,0);

      var img = canvas.toDataURL('image/jpeg', 0.5);
      visualAnalysis($("#visual_recognition_method").val(), img, ctx);
    }

    $(function() {
      $('#img_file_upload').change(function(e) {
          var file = e.target.files[0],
              imageType = /image.*/;

          if (!file.type.match(imageType))
              return;

          var reader = new FileReader();
          reader.onload = fileOnload;
          reader.readAsDataURL(file);
      });

      function fileOnload(e) {
          var $img = $('<img>', { src: e.target.result });
          $img.on('load', function() {
              var max_size = 1000;

              if(this.naturalWidth <= max_size && this.naturalHeight <= max_size){
                canvas.width = this.naturalWidth;
                canvas.height = this.naturalHeight;
                // Calculate Factor
                factor = (1 - Math.max(this.naturalWidth, this.naturalHeight)/1280).toFixed(2);
              
              } else if (this.naturalWidth > max_size && this.naturalHeight <= this.naturalWidth) {
                // Scale Down Width to max_size; adjust height accordingly
                canvas.width = max_size;
                canvas.height = Math.round(max_size*this.naturalHeight/this.naturalWidth,0);

                // Calculate Factor - Above formula w/ max = max_size
                factor = 0.22; 
              } else {
                // Scale Down Height to max_size; adjust width accordingly

                canvas.height = max_size;
                canvas.width = Math.round(max_size*this.naturalWidth/this.naturalHeight,0);

                // Calculate Factor - Above formula w/ max = max_size
                factor = 0.22; 
              }
              
              ctx.drawImage(this, 0, 0, canvas.width,canvas.height);
              var img = canvas.toDataURL('image/jpeg', factor);
              
              visualAnalysis($("#visual_recognition_method").val(), img, ctx);
          });
      }
    });